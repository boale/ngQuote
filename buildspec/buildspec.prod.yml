version: 0.2

env:
  variables:
    CACHE_CONTROL: 86400
    BUILD_ENV: test
    S3_BUCKET: quote-app-prod
    GIT_BRANCH: master
    CI_NAME: CodeBuild
    # CLOUDFRONT_ID: ""
    # CLOUDFRONT_APP_URL: ""
    # CODE_CLIMATE_REPORTER_ID: ""
    CODECOV_COVERAGE_REPORT_PATH: "coverage/lcov.info"

phases:
  install:
    runtime-versions:
      nodejs: 12.x

    commands:
      # Get Chrome Information.
      - curl -sS -o - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
      - echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list

      # Update packages.
      - apt-get update -y -q

      # Install Chrome.
      - apt-get -y install google-chrome-stable

      # Install @angular/cli and app dependencies.
      - echo Installing source NPM dependencies...
      - npm install -g @angular/cli
      - npm install

      # Set up all required/necessary env variables and Install CodeClimate reporter.
      - export GIT_COMMIT_SHA="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION)"
      - export GIT_COMMITTED_AT="$(date +%s)"
      - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      - chmod +x ./cc-test-reporter
      - ./cc-test-reporter before-build

  pre_build:
    commands:
      # Run code quality tools.
      - echo Running code quality checks...
      - npm run lint
      - npm run test:coverage

  build:
    commands:
      # Build Angular application.
      - echo Build started on `date`
      - npm run build:prod

  post_build:
    commands:
      # Upload test coverage report to CodeClimate.
      - ./cc-test-reporter after-build -t lcov -r ${CODE_CLIMATE_REPORTER_ID} --exit-code $?

      # Clear S3 bucket.
      - aws s3 rm s3://${S3_BUCKET} --recursive
      - echo S3 bucket is cleared.
      # Copy dist folder to S3 bucket.
      - aws s3 cp dist s3://${S3_BUCKET} --recursive

      # Clear CloudFront cache.
      - aws configure set preview.cloudfront true
      # Create CloudFront invalidation.
      - aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths "/*"

      # FINALLY: Run e2e tests.
      - npm run e2e -- --configuration=production --base-url=${CLOUDFRONT_APP_URL}

artifacts:
  files:
    - '**/*'
  base-directory: 'dist*'
  discard-paths: yes
